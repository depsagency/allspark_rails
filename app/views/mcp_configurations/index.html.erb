<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold">MCP Configurations</h1>
    <%= link_to "Add Configuration", new_mcp_configuration_path, class: "btn btn-primary" %>
  </div>

  <% if @templates.any? %>
    <!-- Template Gallery -->
    <div class="mb-8">
      <h2 class="text-xl font-semibold mb-4">Quick Add from Templates</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <% @templates.each do |category, templates| %>
          <% templates.each do |template| %>
            <div class="card bg-base-100 shadow-md hover:shadow-lg transition-shadow">
              <div class="card-body">
                <h3 class="card-title text-lg"><%= template.name %></h3>
                <p class="text-sm opacity-75 mb-2"><%= template.description %></p>
                <div class="flex justify-between items-center">
                  <span class="badge badge-outline"><%= template.category %></span>
                  <%= link_to "Add", new_mcp_configuration_path(template: template.key), 
                      class: "btn btn-primary btn-sm" %>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>
  <% end %>

  <!-- Active Configurations -->
  <div>
    <h2 class="text-xl font-semibold mb-4">Your Configurations</h2>
    
    <% if @configurations.any? %>
      <div class="space-y-4">
        <% @configurations.each do |config| %>
          <div class="card bg-base-100 shadow" data-config-id="<%= config.id %>">
            <div class="card-body">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <h3 class="font-bold text-lg flex items-center gap-2">
                    <%= config.name %>
                    <% if config.enabled? %>
                      <span class="badge badge-success badge-sm">Active</span>
                    <% else %>
                      <span class="badge badge-ghost badge-sm">Disabled</span>
                    <% end %>
                  </h3>
                  
                  <div class="mt-2 space-y-1">
                    <p class="text-sm opacity-75">
                      <span class="font-medium">Type:</span> 
                      <span class="badge badge-outline badge-sm"><%= config.server_type %></span>
                    </p>
                    
                    <% case config.server_type %>
                    <% when 'stdio' %>
                      <p class="text-sm">
                        <span class="font-medium">Command:</span> 
                        <code class="text-xs bg-base-200 px-1 rounded"><%= config.server_config['command'] %></code>
                      </p>
                    <% when 'http', 'sse', 'websocket' %>
                      <p class="text-sm">
                        <span class="font-medium">Endpoint:</span> 
                        <code class="text-xs bg-base-200 px-1 rounded"><%= config.server_config['endpoint'] || config.server_config['url'] %></code>
                      </p>
                    <% end %>
                    
                    <% if config.server_type_stdio? && !config.bridge_available? %>
                      <div class="alert alert-warning alert-sm mt-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-4 w-4" fill="none" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                        <span class="text-xs">Bridge service required for stdio MCP</span>
                      </div>
                    <% end %>
                  </div>
                </div>
                
                <div class="flex gap-2">
                  <%= button_to toggle_mcp_configuration_path(config), 
                      method: :patch,
                      class: "btn btn-sm #{config.enabled? ? 'btn-error' : 'btn-success'}" do %>
                    <%= config.enabled? ? 'Disable' : 'Enable' %>
                  <% end %>
                  
                  <%= link_to "View", mcp_configuration_path(config), 
                      class: "btn btn-sm btn-ghost" %>
                      
                  <%= link_to "Edit", edit_mcp_configuration_path(config), 
                      class: "btn btn-sm" %>
                  
                  <button class="btn btn-sm btn-ghost" onclick="testConfiguration('<%= config.id %>')">
                    Test
                  </button>
                  
                  <%= button_to mcp_configuration_path(config), 
                      method: :delete,
                      data: { confirm: "Are you sure?" },
                      class: "btn btn-sm btn-error btn-outline" do %>
                    Delete
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    <% else %>
      <div class="alert alert-info">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span>No MCP configurations yet. Add one from the templates above!</span>
      </div>
    <% end %>
  </div>
</div>

<script>
function testConfiguration(configId) {
  const card = document.querySelector(`[data-config-id="${configId}"]`);
  const originalContent = card.innerHTML;
  
  // Show loading state
  card.classList.add('opacity-50');
  
  fetch(`/mcp_configurations/${configId}/test`, {
    method: 'POST',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
      'Accept': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    card.classList.remove('opacity-50');
    
    if (data.success) {
      // Show success message
      showNotification('success', `Test successful: ${data.message}`);
    } else {
      // Show error message
      showNotification('error', `Test failed: ${data.message}`);
    }
  })
  .catch(error => {
    card.classList.remove('opacity-50');
    showNotification('error', 'Test failed: Network error');
  });
}

function showNotification(type, message) {
  const notification = document.createElement('div');
  notification.className = `alert alert-${type} fixed top-4 right-4 z-50 max-w-md shadow-lg`;
  notification.innerHTML = `
    <span>${message}</span>
    <button class="btn btn-sm btn-ghost" onclick="this.parentElement.remove()">âœ•</button>
  `;
  document.body.appendChild(notification);
  
  setTimeout(() => notification.remove(), 5000);
}
</script>